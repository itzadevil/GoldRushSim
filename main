import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';

const GoldRushGame = () => {
  const [gameState, setGameState] = useState({
    money: 250,
    gold: 0,
    day: 1,
    health: 100,
    supplies: 100,
    location: "Independence, Missouri",
    equipment: {
      pan: false,
      shovel: false,
      pickaxe: false,
      dynamite: false
    },
    gameLog: [],
    showMiningGuide: false
  });

  const addToLog = (message) => {
    setGameState(prev => ({
      ...prev,
      gameLog: [...prev.gameLog, message]
    }));
  };

  const prices = {
    pan: 20,
    shovel: 50,
    pickaxe: 100,
    dynamite: 150,
    supplies: 50,
    bandages: 15,
    medicine: 30,
    doctor: 100
  };

  const healing = {
    bandages: 20,
    medicine: 50,
    doctor: 100
  };

  const routes = {
    "Independence, Missouri": {
      "California": {
        options: {
          "Panama Route": {
            speed: "FASTEST (3-4 months)",
            danger: "MEDIUM DANGER",
            hazards: ["Malaria", "Shipwreck", "Bandits"],
            days: [90, 120]
          },
          "Cape Horn Route": {
            speed: "SLOWEST (6-8 months)",
            danger: "LOW DANGER",
            hazards: ["Storm", "Scurvy", "Shipwreck"],
            days: [180, 240]
          },
          "Overland Route": {
            speed: "FAST (4-5 months)",
            danger: "HIGH DANGER",
            hazards: ["Dysentery", "Broken Wagon", "Native American Conflict"],
            days: [120, 150]
          }
        }
      }
    }
  };

  const travel = (route) => {
    const routeData = routes["Independence, Missouri"]["California"].options[route];
    const hazard = routeData.hazards[Math.floor(Math.random() * routeData.hazards.length)];
    const damage = Math.floor(Math.random() * 20) + 10;
    const travelDays = Math.floor(Math.random() * (routeData.days[1] - routeData.days[0])) + routeData.days[0];

    setGameState(prev => ({
      ...prev,
      health: Math.max(0, prev.health - damage),
      supplies: Math.max(0, prev.supplies - damage),
      day: prev.day + travelDays,
      location: "California"
    }));

    addToLog(`You encountered ${hazard}! Lost ${damage} health and supplies.`);
    addToLog(`Your journey took ${travelDays} days.`);
    addToLog("You have arrived in California!");
  };

  const travelToGoldFields = () => {
    const days = Math.floor(Math.random() * 4) + 1;
    setGameState(prev => ({
      ...prev,
      location: "Gold Fields",
      day: prev.day + days
    }));
    addToLog(`Traveled ${days} days to reach the Gold Fields.`);
  };

  const panForGold = () => {
    if (!gameState.equipment.pan) {
      addToLog("You need a gold pan to pan for gold!");
      return;
    }

    const success = Math.random();
    if (success < 0.6) {
      const goldFound = Math.round((Math.random() * 0.4 + 0.1) * 100) / 100;
      setGameState(prev => ({
        ...prev,
        gold: prev.gold + goldFound,
        supplies: Math.max(0, prev.supplies - 5),
        health: Math.max(0, prev.health - 5),
        day: prev.day + 1
      }));
      addToLog(`You found ${goldFound} ounces of gold!`);
    } else {
      setGameState(prev => ({
        ...prev,
        supplies: Math.max(0, prev.supplies - 5),
        health: Math.max(0, prev.health - 5),
        day: prev.day + 1
      }));
      addToLog("No luck this time...");
    }
  };

  const placerMine = () => {
    if (!gameState.equipment.shovel) {
      addToLog("You need a shovel to do placer mining!");
      return;
    }

    const success = Math.random();
    if (success < 0.4) {
      const goldFound = Math.round((Math.random() * 1.5 + 0.5) * 100) / 100;
      setGameState(prev => ({
        ...prev,
        gold: prev.gold + goldFound,
        supplies: Math.max(0, prev.supplies - 10),
        health: Math.max(0, prev.health - 10),
        day: prev.day + 1
      }));
      addToLog(`You found ${goldFound} ounces of gold!`);
    } else {
      setGameState(prev => ({
        ...prev,
        supplies: Math.max(0, prev.supplies - 10),
        health: Math.max(0, prev.health - 10),
        day: prev.day + 1
      }));
      addToLog("No luck today...");
    }
  };

  const hardRockMine = () => {
    if (!gameState.equipment.pickaxe) {
      addToLog("You need a pickaxe to do hard rock mining!");
      return;
    }

    const success = Math.random();
    const successModifier = gameState.equipment.dynamite ? 0.4 : 0.2;
    if (success < successModifier) {
      const goldFound = Math.round((Math.random() * 3 + 2) * 100) / 100;
      setGameState(prev => ({
        ...prev,
        gold: prev.gold + goldFound,
        supplies: Math.max(0, prev.supplies - 15),
        health: Math.max(0, prev.health - 15),
        day: prev.day + 1
      }));
      addToLog(`You found ${goldFound} ounces of gold!`);
    } else {
      setGameState(prev => ({
        ...prev,
        supplies: Math.max(0, prev.supplies - 15),
        health: Math.max(0, prev.health - 15),
        day: prev.day + 1
      }));
      addToLog("The rock stands firm today...");
    }
  };

  const sellGold = () => {
    if (gameState.gold === 0) {
      addToLog("You don't have any gold to sell!");
      return;
    }

    const pricePerOunce = Math.floor(Math.random() * 10) + 20;
    const earnings = Math.round(gameState.gold * pricePerOunce * 100) / 100;
    setGameState(prev => ({
      ...prev,
      money: prev.money + earnings,
      gold: 0
    }));
    addToLog(`Sold ${gameState.gold} ounces of gold for $${earnings}!`);
  };

  const buyItem = (item) => {
    if (gameState.money < prices[item]) {
      addToLog("You can't afford that!");
      return;
    }

    if (item === 'supplies') {
      setGameState(prev => ({
        ...prev,
        money: prev.money - prices[item],
        supplies: Math.min(100, prev.supplies + 50)
      }));
      addToLog("Bought supplies!");
    } else if (['bandages', 'medicine', 'doctor'].includes(item)) {
      if (gameState.health >= 100) {
        addToLog("You are already at full health!");
        return;
      }
      setGameState(prev => ({
        ...prev,
        money: prev.money - prices[item],
        health: Math.min(100, prev.health + healing[item])
      }));
      addToLog(`Healed ${healing[item]} health!`);
    } else {
      setGameState(prev => ({
        ...prev,
        money: prev.money - prices[item],
        equipment: {
          ...prev.equipment,
          [item]: true
        }
      }));
      addToLog(`Bought ${item}!`);
    }
  };

  const checkGameOver = () => {
    if (gameState.health <= 0) return "You died!";
    if (gameState.supplies <= 0) return "You ran out of supplies!";
    if (gameState.day > 365) {
      return gameState.money >= 500 
        ? `Congratulations! You've won with $${gameState.money}!`
        : `Game Over! You didn't reach $500. Final money: $${gameState.money}`;
    }
    return null;
  };

  const gameOver = checkGameOver();

  return (
    <div className="p-4 max-w-4xl mx-auto">
      <Card>
        <CardHeader>
          <CardTitle>California Gold Rush Simulation - 1848</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-4">
              <div className="bg-gray-100 p-4 rounded-lg">
                <div>Day: {gameState.day}/365</div>
                <div>Location: {gameState.location}</div>
                <div>Money: ${gameState.money}</div>
                <div>Gold: {gameState.gold} oz</div>
                <div>Health: {gameState.health}%</div>
                <div>Supplies: {gameState.supplies}%</div>
                <div>Equipment: {Object.entries(gameState.equipment)
                  .filter(([, has]) => has)
                  .map(([item]) => item)
                  .join(', ')}
                </div>
              </div>

              {!gameOver && (
                <div className="space-y-2">
                  {gameState.location === "Gold Fields" ? (
                    <>
                      <Button onClick={panForGold} className="w-full">Pan for Gold</Button>
                      <Button onClick={placerMine} className="w-full">Placer Mine</Button>
                      <Button onClick={hardRockMine} className="w-full">Hard Rock Mine</Button>
                      <Button onClick={sellGold} className="w-full">Sell Gold</Button>
                      <Button onClick={() => setGameState(prev => ({ ...prev, showMiningGuide: !prev.showMiningGuide }))} 
                              className="w-full">
                        {gameState.showMiningGuide ? "Hide" : "Show"} Mining Guide
                      </Button>
                    </>
                  ) : (
                    <>
                      {gameState.location === "Independence, Missouri" && (
                        <div className="space-y-2">
                          {Object.keys(routes["Independence, Missouri"]["California"].options).map(route => (
                            <Button key={route} onClick={() => travel(route)} className="w-full">
                              Travel via {route}
                            </Button>
                          ))}
                        </div>
                      )}
                      {gameState.location === "California" && (
                        <Button onClick={travelToGoldFields} className="w-full">
                          Travel to Gold Fields
                        </Button>
                      )}
                    </>
                  )}
                  
                  <div className="space-y-2 mt-4">
                    <h3 className="font-bold">Store:</h3>
                    {Object.entries(prices).map(([item, price]) => (
                      <Button key={item} onClick={() => buyItem(item)} className="w-full">
                        Buy {item} (${price})
                      </Button>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <div>
              {gameState.showMiningGuide ? (
                <div className="bg-gray-100 p-4 rounded-lg">
                  <h3 className="font-bold mb-4">Mining Guide</h3>
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-semibold">Panning for Gold</h4>
                      <p>Easiest method. Requires pan. Low risk, small but consistent yields.</p>
                    </div>
                    <div>
                      <h4 className="font-semibold">Placer Mining</h4>
                      <p>Moderate difficulty. Requires shovel. Better yields than panning.</p>
                    </div>
                    <div>
                      <h4 className="font-semibold">Hard Rock Mining</h4>
                      <p>Most difficult. Requires pickaxe. Highest yields. Can be improved with dynamite.</p>
                    </div>
                  </div>
                </div>
              ) : (
                <ScrollArea className="h-96 bg-gray-100 p-4 rounded-lg">
                  <div className="space-y-2">
                    {gameState.gameLog.map((log, index) => (
                      <div key={index} className="text-sm">{log}</div>
                    ))}
                  </div>
                </ScrollArea>
              )}
            </div>
          </div>

          {gameOver && (
            <div className="mt-4 p-4 bg-gray-100 rounded-lg text-center">
              <h2 className="text-xl font-bold">{gameOver}</h2>
              <Button 
                onClick={() => window.location.reload()} 
                className="mt-4">
                Play Again
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default GoldRushGame;
